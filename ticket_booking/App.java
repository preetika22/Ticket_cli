/*
 * This source file was generated by the Gradle 'init' task
 */
package org.ticket_booking;

import org.ticket_booking.entities.Ticket;
import org.ticket_booking.entities.Train;
import org.ticket_booking.entities.User;
import org.ticket_booking.services.UserBookingService;
import org.ticket_booking.utils.UserServiceUtils;

import java.io.IOException;
import java.util.*;

public class App {
    public static void main(String[] args) throws IOException {
        System.out.println("Running Train Booking System");
        int option = 0;
        Scanner scanner = new Scanner(System.in);

        UserBookingService userBookingService;
        try{
            userBookingService = new UserBookingService();
        }catch(IOException ex){
            System.out.println("There is something wrong");
            return;
        }

        System.out.println("Make a selection:");

        Train trainSelectedForBooking = new Train();
        List<List<Integer>> seats = new ArrayList<>();

        User user = new User();
        String start = "";
        String destination = "";

        while(option!=7) {
            System.out.println("Choose option");
            System.out.println("1. Sign up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Bookings");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel my Booking");
            System.out.println("7. Exit the App");
            option = scanner.nextInt();

            switch (option) {
                case 1:
                    System.out.println("Enter the username to signup");
                    String nameToSignUp = scanner.next();
                    System.out.println("Enter the password to signup");
                    String passwordToSignUp = scanner.next();
                    User userToSignup = new User(nameToSignUp, passwordToSignUp, UserServiceUtils.hashPassword(passwordToSignUp), new ArrayList<>(), UUID.randomUUID().toString());
                    userBookingService.signUp(userToSignup);
                    break;
                case 2:
                    System.out.println("Enter the username to Login");
                    String nameToLogin = scanner.next();
                    System.out.println("Enter the password to Login");
                    String passwordToLogin = scanner.next();
                    user = new User(nameToLogin, passwordToLogin, UserServiceUtils.hashPassword(passwordToLogin), new ArrayList<>(), UUID.randomUUID().toString());
                    boolean loginAccepted = userBookingService.login(user);
                    if(loginAccepted){
                        try {
                            userBookingService = new UserBookingService(user);
                        } catch (IOException ex) {
                            return;
                        }
                    } else{
                        System.out.println("Invalid attempt");
                    }
                    break;
                case 3:
                    System.out.println("Fetching your bookings");
                    userBookingService.fetchBookings();
                    break;
                case 4:
                    System.out.println("Type your source station");
                     start = scanner.next();
                    System.out.println("Type your destination station");
                    destination = scanner.next();
                    List<Train> trains = userBookingService.getTrains(start, destination);
                    if(trains.isEmpty()){
                        return;
                    }
                    int index = 1;
                    for (Train t : trains) {
                        System.out.println(index + " Train id : " + t.getTrainId());
                        for (Map.Entry<String, String> entry : t.getSchedule().entrySet()) {
                            System.out.println("station " + entry.getKey() + " time: " + entry.getValue());
                        }
                        index ++;
                    }
                    System.out.println("Select a train by typing 1,2,3...");
                    int trainIndex = scanner.nextInt() - 1;
                    trainSelectedForBooking = trains.get(trainIndex);
                    break;
                case 5:
                    System.out.println("Select a seat out of these seats");
                    seats = userBookingService.fetchSeats(trainSelectedForBooking);

                    for (List<Integer> row : seats) {
                        for (Integer val : row) {
                            System.out.print(val + " ");
                        }
                        System.out.println();
                    }
                    System.out.print("Enter date of travel (YYYY-MM-DD): ");
                    String dateOfTravel = scanner.next();
                    System.out.println("Select the seat by typing the row and column");
                    System.out.println("Enter the row");
                    int row = scanner.nextInt();
                    System.out.println("Enter the column");
                    int col = scanner.nextInt();
                    System.out.println("Booking your seat....");
                    Boolean booked = userBookingService.bookSeat(trainSelectedForBooking, row, col);
                    if (booked.equals(Boolean.TRUE)) {
                        userBookingService.createNewTicket(start, destination, dateOfTravel ,trainSelectedForBooking);

                        System.out.println("Booked! Enjoy your journey");
                    } else {
                        System.out.println("Can't book this seat");
                    }
                    break;
                case 6:
                    System.out.println("Enter your ticket_id");
                    String ticketId = scanner.next(); // Read user input for ticket ID

                    boolean isCancelled = userBookingService.cancelBooking(ticketId); // Call the method

                    if (isCancelled) {
                        System.out.println("Ticket successfully canceled.");
                    } else {
                        System.out.println("Ticket cancellation failed. Ticket not found.");
                    }
                    break;
                default:
                    break;
            }
        }
        }
    }


